TODO (1) Open the starter project from the github repo in Android Studio.

TODO (2) Add the navigation libraries to the app [build.gradle] file.

TODO (3) Add the safe-arg plugin to the main and app [build.gradle] file.

TODO (4) Set [DataBindingUtil] in [build.gradle].

TODO (5) Use [DataBindingUtil] to inflate every layout.

TODO (6) Create a new navigation xml file.

TODO (7) Create a new Login destination.
    - Include email and password labels.
    - Include email and password fields.
    - Create buttons for creating a new login and logging in with an existing account.
    - Clicking either button should navigate to the Welcome Screen.

TODO (8) Create a new Welcome screen destination that includes:
    - A new layout.
    - At least 2 textViews and use any text you would like.
    - A navigation button with actions to navigate to the instructions screen.

TODO (9) Create a new Instruction destination that includes:
    - A new layout.
    - At least 2 textViews with appropriate information.
    - A navigation button with actions to navigate to the shoe list screen.

TODO (10) Create a class that extends [ViewModel]
    - Use a [LiveData] field that returns the list of shoes.

TODO (11) Create a new Shoe List destination that includes:
    - A new layout.
    - A [ScrollView].
    - A [LinearLayout] inside the [ScrollView] for Shoe Items.
    - A [FloatingActionButton] with an action to navigate to the shoe detail screen.

TODO (12) In [MainActivity], setup the nav controller with the toolbar and an [AppBarConfiguration].

TODO (13) In MainActivity, add a Logout menu to return to the login screen.

TODO (14) Create a new Shoe Detail destination that includes:
    - A new layout.
    - A [TextView] label and [EditView] for the Shoe Name, Company, Shoe Size and Description.
    - A Cancel button with an action to navigate back to the shoe list screen.
    - A Save button with an action to navigate back to the shoe list screen and add a new Shoe to the Shoe ViewModel.
        Hint: In the Shoe List destination, to add a child view programmatically to a ViewGroup, such as LinearLayout, use the addView() method. Refer to a sample implementation in the StackOverflow discussion here:
        "https://stackoverflow.com/questions/2395769/how-to-programmatically-add-views-to-views"

TODO (15) Make sure you canâ€™t go back to on-boarding screens In the Shoe List screen:
    - use an Activity level [ViewModel] to hold a list of Shoes (use by [activityViewModels]).
    - Observe the shoes variable from the ViewModel.
    - Add a new layout item into the scrollview for each shoe.